name: Build and Publish ASP.NET Core Docker Image

on:
  push:
    branches:
      - main
      - 'release/*'
      - 'hotfix/*'
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      DOTNET_VERSION: '8.0'
      IMAGE_NAME: '${{ github.repository_owner }}/temperature-demo'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Define image tag
      id: vars
      run: |
        if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
          IMAGE_TAG=${GITHUB_REF_NAME}
        elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
          IMAGE_TAG=latest
        else
          IMAGE_TAG=${GITHUB_REF_NAME}-${GITHUB_SHA::7}
        fi
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Restore dependencies
      working-directory: src
      run: dotnet restore Temperature.Demo.csproj

    - name: Build
      working-directory: src
      run: dotnet build Temperature.Demo.csproj --configuration Release --no-restore

    - name: Publish
      working-directory: src
      run: dotnet publish Temperature.Demo.csproj -c Release -o ../publish --no-build

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      working-directory: src
      run: |
        docker build \
          -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          -t ${{ env.IMAGE_NAME }}:latest \
          .

    - name: Push Docker image
      run: |
        docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.IMAGE_NAME }}:latest

    - name: Done
      run: |
        echo "‚úÖ Imagem publicada com sucesso!"
        echo "üì¶ Nome: ${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è  Tag: ${{ env.IMAGE_TAG }}"
